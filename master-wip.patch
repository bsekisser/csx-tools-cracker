diff --git a/include/cracker.h b/include/cracker.h
index eff2142..dcdde0a 100644
--- a/include/cracker.h
+++ b/include/cracker.h
@@ -18,7 +18,9 @@ enum {
 	rrRSOP,
 	rrRSCO,
 	REG_COUNT,
-
+//
+	rrREA = rrRSOP,
+//
 	rrPTR = 0x10,
 };
 
@@ -103,17 +105,20 @@ typedef struct cracker_core_t {
 	};
 }cracker_core_t;
 
+typedef struct cracker_content_t* cracker_content_p;
+typedef struct cracker_content_t {
+		uint32_t base;
+		void* data;
+		uint32_t end;
+		size_t size;
+}cracker_content_t;
+
 typedef struct cracker_t* cracker_p;
 typedef struct cracker_t {
 	cracker_core_t core;
 #define CORE (&cj->core)
 
-	struct {
-		uint32_t base;
-		void* data;
-		uint32_t end;
-		size_t size;
-	}content;
+	cracker_content_t content;
 
 	symbol_p symbol;
 	uint symbol_pass;
@@ -154,13 +159,20 @@ typedef struct cracker_t {
 /* **** */
 
 uint32_t _read(cracker_p cj, uint32_t pat, size_t size);
+void cracker_clear(cracker_p cj);
 symbol_p cracker_data(cracker_p cj, uint32_t pat, size_t size);
+uint32_t cracker_data_ptr_read(cracker_p cj, uint32_t pat, size_t size);
+void cracker_pass(cracker_p cj, int trace);
 void cracker_reg_dst(cracker_p cj, uint8_t r);
 void cracker_reg_src(cracker_p cj, uint8_t r);
 int cracker_step(cracker_p cj);
 void cracker_symbol_end(symbol_p cjs, uint32_t pat, const char* name);
+void cracker_symbol_queue_log(cracker_p cj, symbol_p sqh);
+int cracker_symbol_step(cracker_p cj, symbol_p cjs);
 symbol_p cracker_text(cracker_p cj, uint32_t pat);
-int cracker_text_branch_link(cracker_p cj, uint32_t new_lr);
+void cracker_text_branch(cracker_p cj, uint32_t new_pc);
+int cracker_text_branch_link(cracker_p cj, uint32_t new_pc, uint32_t new_lr);
+int cracker_text_link(cracker_p cj, uint32_t new_lr);
 symbol_p cracker_text_end(cracker_p cj, uint32_t pat);
 int cracker_text_end_if(cracker_p cj, uint32_t pat, int end);
 
@@ -179,6 +191,7 @@ static inline void _setup_rR_dst(cracker_p cj, uint8_t rxd, uint8_t rrd)
 
 	cracker_reg_dst(cj, rrd);
 	
+//	vGPR_rRx(rrd) = 0;
 	GPR(rrd).src = 0;
 	GPR(rrd).isPtr = 0;
 }
@@ -207,10 +220,15 @@ static inline void _setup_rR_src(cracker_p cj, uint8_t rxs, uint8_t rrs)
 	cracker_reg_src(cj, rrs);
 }
 
+static inline void _setup_rR_src_v(cracker_p cj, uint8_t rxs, uint8_t rrs, uint32_t vr)
+{
+	_setup_rR_vR(cj, rxs, rrs, vr);
+
+	cracker_reg_src(cj, rrs);
+}
+
 #define setup_rR_vR_src(_rxs, _rrs) _setup_rR_vR_src(cj, rrR##_rxs, _rrs)
 static inline void _setup_rR_vR_src(cracker_p cj, uint8_t rxs, uint8_t rrs)
 {
-	_setup_rR_src(cj, rxs, rrs);
-
-	vRx(rxs) = vRx_GPR(rrs);
+	_setup_rR_src_v(cj, rxs, rrs, vRx_GPR(rrs));
 }
diff --git a/include/cracker_trace.h b/include/cracker_trace.h
index 69fe84e..54483c5 100644
--- a/include/cracker_trace.h
+++ b/include/cracker_trace.h
@@ -1,5 +1,11 @@
+#pragma once
+
+/* **** */
+
 #include <stdio.h>
 
+/* **** */
+
 #define _CORE_TRACE_(_f, ...) \
 	({ \
 		if(cj->core.trace) \
diff --git a/source/cracker_arm.c b/source/cracker_arm.c
index 636e4e0..460f921 100644
--- a/source/cracker_arm.c
+++ b/source/cracker_arm.c
@@ -26,9 +26,16 @@
 
 static uint32_t _fetch(cracker_p cj)
 {
+	if(0 != (IP & 3)) {
+		LOG("IP = 0x%08x, IP[1:0] = %u", IP, mlBFEXT(IP, 1, 0));
+	cracker_disasm_arm(cj, IP, IR);
+//		LOG_ACTION(return(0));
+		assert(0 == (IP & 3));
+	}
+
 	PC += sizeof(uint32_t);
 
-	return(_read(cj, IP, sizeof(uint32_t)));
+	return(_read(cj, IP & ~3U, sizeof(uint32_t)));
 }
 
 static void _shifter_operand(cracker_p cj)
@@ -66,10 +73,10 @@ static int arm_inst_b_bl(cracker_p cj)
 		link ? "L" : "", blx ? "X" : "", new_pc & (~3 >> blx),
 		blx ? 'T' : 'A', splat ? "x" : "", offset);
 
-	cracker_text(cj, new_pc);
-
-	if(link || (CC_AL != ARM_IR_CC))
-		return(cracker_text_branch_link(cj, PC));
+	if(link || (CC_AL != ARM_IR_CC)) {
+		return(cracker_text_branch_link(cj, new_pc, PC));
+	} else
+		cracker_text_branch(cj, new_pc);
 
 	return(0);
 }
@@ -89,16 +96,17 @@ static int arm_inst_bx(cracker_p cj)
 	_CORE_TRACE_("BX(%s)", rR_NAME(M));
 
 	if(rPC == rR_SRC(M)) {
-		_CORE_TRACE_("; /* %c(0x%08x) */", vR(M) & 1 ? 'T' : 'A', vR(M));
+		const int thumb = vR(M) & 1;
+		_CORE_TRACE_("; /* %c(0x%08x) */", thumb ? 'T' : 'A', vR(M));
 
-		cracker_text(cj, vR(M));
+		cracker_text_branch(cj, vR(M));
 	}
 
 	CORE_TRACE_END();
 
 	if(link || (CC_AL != ARM_IR_CC))
-		return(cracker_text_branch_link(cj, PC));
-
+		return(cracker_text_link(cj, LR));
+	
 	return(0);
 }
 
@@ -188,7 +196,7 @@ static void arm_inst_dp(cracker_p cj)
 
 			vGPR_rR(D) = vR(D);
 			if(rPC == rR(D))
-				cracker_text(cj, vR(D));
+				cracker_text_branch(cj, vR(D));
 		}
 	}
 }
@@ -290,8 +298,11 @@ static int arm_inst_ldst(cracker_p cj)
 {
 	setup_rR_vR_src(N, ARM_IR_RN);
 
+	if(0) LOG("%s -- 0x%08x", rR_NAME(N), vR(N));
+
 	if(ARM_IR_LDST_BIT(l20)) {
 		setup_rR_dst_src(D, ARM_IR_RD, rR(N));
+		if(0) LOG("%s -- 0x%08x", rR_NAME(D), vR(D));
 	} else {
 		setup_rR_src(D, ARM_IR_RD);
 	}
@@ -357,13 +368,13 @@ static int arm_inst_ldst_immediate(cracker_p cj)
 		_CORE_TRACE_("; /* [0x%08x]", pat);
 
 		if(is_rPC) {
-			const uint32_t data = _read(cj, pat, size);
+			vR(D) = _read(cj, pat, size);
 
 			if(ARM_IR_LDST_BIT(b22)) {
-				_CORE_TRACE_(":0x%02x", data);
+				_CORE_TRACE_(":0x%02x", vR(D));
 			} else {
-				vGPR_rR(D) = data;
-				_CORE_TRACE_(":0x%08x", data);
+				vGPR_rR(D) = vR(D);
+				_CORE_TRACE_(":0x%08x", vR(D));
 			}
 		}
 
@@ -372,6 +383,13 @@ static int arm_inst_ldst_immediate(cracker_p cj)
 
 	CORE_TRACE_END();
 	
+	if(0) {
+		if(rPC == ARM_IR_RD)
+			LOG("rPC == ARM_IR_RD");
+
+		LOG("%s -- 0x%08x", rR_NAME(N), vR(N));
+	}
+
 	return(cracker_text_end_if(cj, IP, rPC == ARM_IR_RD));
 }
 
@@ -463,7 +481,7 @@ static int arm_inst_ldstm(cracker_p cj)
 		_CORE_TRACE_("(%s%s, ", rR_NAME(N), ARM_IR_LDST_BIT(w21) ? ".WB " : "");
 	}
 
-	assert(0 == ARM_IR_LDSTM_BIT(s22));
+//	assert(0 == ARM_IR_LDSTM_BIT(s22));
 
 	char reglist[17], *dst = reglist;
 	
diff --git a/source/cracker_main.c b/source/cracker_main.c
index 2af5499..c89ab30 100644
--- a/source/cracker_main.c
+++ b/source/cracker_main.c
@@ -31,20 +31,6 @@
 
 /* **** */
 
-//#define RGNDirPath "../../../garmin/rgn_files/"
-#define RGNDirPath "../../../garmin/rgn_files/"
-
-//#define RGNFileName "029201000350" /* xxx */
-
-#define RGNFileName "038201000610"
-//#define RGNFileName "038201000280"
-
-//#define RGNFileName "048101000610"
-
-//#define RGNFileName "049701000610"
-
-/* **** */
-
 static uint8_t* _check_bounds(cracker_p cj, uint32_t pat, size_t size, void **p2ptr)
 {
 	if(pat < cj->content.base)
@@ -94,6 +80,14 @@ void cracker_clear(cracker_p cj)
 	}
 }
 
+uint32_t cracker_data_ptr_read(cracker_p cj, uint32_t pat, size_t size)
+{
+	cracker_data(cj, pat, sizeof(uint32_t));
+	pat = _read(cj, pat, sizeof(uint32_t));
+	cracker_data(cj, pat, size);
+	return(_read(cj, pat, size));
+}
+
 symbol_p cracker_data(cracker_p cj, uint32_t pat, size_t size)
 {
 	symbol_h sqh = &cj->symbol_qhead;
@@ -135,8 +129,9 @@ static void cracker_pass_step(cracker_p cj, symbol_p cjs, int trace)
 
 	cj->symbol = cjs;
 	PC = cjs->pat;
+//	PC |= !!cjs->thumb;
 	while(PC <= cjs->end_pat) {
-		if(!cracker_step(cj)) {
+		if(0 == cracker_symbol_step(cj, cjs)) {
 			cracker_clear(cj);
 			break;
 		}
@@ -208,34 +203,42 @@ int cracker_step(cracker_p cj)
 
 /* **** */
 
-void cracker_symbol__log_data(cracker_p cj, symbol_p cjs) {
-	LOG_START("0x%08x:", cjs->pat);
+void cracker_symbol__log_data_log(cracker_p cj, symbol_p cjs, size_t size)
+{
+	if(0 == BTST(cjs->size, size))
+		return;
 
-	_LOG_(" refs: 0x%04x", cjs->refs);
+	_LOG_(", (uint%u_t", size << 3);
 
-	uint32_t data = 0;
-	size_t size = cjs->size;
+	if(_check_bounds(cj, cjs->pat, size, 0)) {
+		uint32_t data = _read(cj, cjs->pat, size);
 
-	if(BEXT(size, sizeof(uint32_t)))
-		data = _read(cj, cjs->pat, sizeof(uint32_t));
-	else if(BEXT(size, sizeof(uint16_t)))
-		data = _read(cj, cjs->pat, sizeof(uint16_t));
-	else if(BEXT(size, sizeof(uint8_t)))
-		data = _read(cj, cjs->pat, sizeof(uint8_t));
+		switch(size) {
+			case sizeof(uint32_t):
+				_LOG_(" (0x%08x)", data);
+				break;
+			case sizeof(uint16_t):
+				_LOG_(" (0x%04x)", data);
+				break;
+			case sizeof(uint8_t):
+				_LOG_(" (0x%02x)", data);
+				break;
+		}
+	}
 
-	_LOG_(", size: 0x%04x", size);
+	_LOG_(")");
+}
 
-	if(BXCG(&size, sizeof(uint32_t), 0)) {
-		_LOG_(", (uint32_t (0x%08x))%s", data, size ? " |" : "");
-	}
+void cracker_symbol__log_data(cracker_p cj, symbol_p cjs) {
+	LOG_START("0x%08x:", cjs->pat);
 
-	if(BXCG(&size, sizeof(uint16_t), 0)) {
-		_LOG_(", (uint16_t (0x%04x))%s", (uint16_t)data, size ? " |" : "");
-	}
+	_LOG_(" refs: 0x%04x", cjs->refs);
 
-	if(BTST(size, sizeof(uint8_t))) {
-		_LOG_(", (uint8_t (0x%02x))", (uint8_t)data);
-	}
+	_LOG_(", size: 0x%04x", cjs->size);
+
+	cracker_symbol__log_data_log(cj, cjs, sizeof(uint32_t));
+	cracker_symbol__log_data_log(cj, cjs, sizeof(uint16_t));
+	cracker_symbol__log_data_log(cj, cjs, sizeof(uint8_t));
 
 	LOG_END();
 }
@@ -264,7 +267,7 @@ void cracker_symbol__log_text(cracker_p cj, symbol_p cjs)
 	if(cjs->in_bounds) {
 		PC = cjs->pat;
 		while(PC <= cjs->end_pat) {
-			if(!cracker_step(cj)) {
+			if(!cracker_symbol_step(cj, cjs)) {
 				cracker_clear(cj);
 				break;
 			}
@@ -287,21 +290,25 @@ void cracker_symbol_end(symbol_p cjs, uint32_t pat, const char* name)
 		return;
 
 	const uint32_t pat_mask = (~3 >> cjs->thumb);
+//	const uint32_t pat_mask = (~3 >> pat & 1);
 	const uint32_t pat_masked = pat & pat_mask;
 
-	if(pat_masked < (cjs->pat & pat_mask))
+	const uint32_t cjs_pat_mask = (~3 >> cjs->thumb);
+
+	if(pat_masked < (cjs->pat & cjs_pat_mask))
 		return;
 
-	if(pat_masked > (cjs->end_pat & pat_mask))
+	if(pat_masked > (cjs->end_pat & cjs_pat_mask))
 		return;
 
 	const uint32_t end_pat_offset = 4 >> cjs->thumb;
-	const uint32_t end_pat = (pat - end_pat_offset) & pat_mask;
+	const uint32_t end_pat = (pat - end_pat_offset) & cjs_pat_mask;
 
 	if(0) LOG("%s%s-- pat: 0x%08x, end: 0x%08x, new_end: 0x%08x",
 		name ?: "", name ? " " : "",
 		cjs->pat, cjs->end_pat, end_pat);
 
+//	cjs->end_pat = end_pat | cjs->thumb;
 	cjs->end_pat = end_pat;
 }
 
@@ -331,10 +338,22 @@ void cracker_symbol_queue_log(cracker_p cj, symbol_p sqh)
 	}while(cjs);
 }
 
+int cracker_symbol_step(cracker_p cj, symbol_p cjs)
+{
+	IP = PC;
+	
+	if(cjs->thumb)
+		return(thumb_step(cj));
+	
+	return(arm_step(cj));
+}
+
 /* **** */
 
 symbol_p cracker_text(cracker_p cj, uint32_t pat)
 {
+	const int thumb = pat & 1;
+
 	symbol_h sqh = &cj->symbol_qhead;
 
 	symbol_p lhs = 0;
@@ -350,7 +369,7 @@ symbol_p cracker_text(cracker_p cj, uint32_t pat)
 		cj->symbol_count.added++;
 		cj->symbol_count.text++;
 
-//		LOG("pat = %c(0x%08x)", thumb ? 'T' : 'A', pat);
+		if(0) LOG("pat = %c(0x%08x)", thumb ? 'T' : 'A', pat);
 
 		cracker_symbol_end(lhs, pat, "cracker_text -- lhs");
 
@@ -359,24 +378,37 @@ symbol_p cracker_text(cracker_p cj, uint32_t pat)
 
 		cjs->end_pat = ~0U;
 		cjs->in_bounds = (0 != _check_bounds(cj, pat, sizeof(uint32_t), 0));
-		cjs->thumb = pat & 1;
+		cjs->thumb = !!thumb;
 	}
 
 	return(cjs);
 }
 
-int cracker_text_branch_link(cracker_p cj, uint32_t new_lr)
+void cracker_text_branch(cracker_p cj, uint32_t new_pc)
 {
-	symbol_p slr = cracker_text(cj, new_lr);
+	cracker_text(cj, new_pc);
+}
 
-	if(1) {
-//		slr->pass = cj->symbol_pass;
-		return(1);
-	}
+int cracker_text_branch_link(cracker_p cj, uint32_t new_pc, uint32_t new_lr)
+{
+	cracker_text_link(cj, new_lr);
+
+	if(new_pc)
+		cracker_text_branch(cj, new_pc);
+
+	return(0);
+}
+
+int cracker_text_link(cracker_p cj, uint32_t new_lr)
+{
+	LR = new_lr;
+	cracker_reg_dst(cj, rLR);
+	cracker_text(cj, new_lr);
 
 	return(0);
 }
 
+
 symbol_p cracker_text_end(cracker_p cj, uint32_t pat)
 {
 	symbol_h sqh = &cj->symbol_qhead;
@@ -397,52 +429,3 @@ int cracker_text_end_if(cracker_p cj, uint32_t pat, int end)
 	
 	return(!end);
 }
-
-/* **** */
-
-int main(void)
-{
-	int fd;
-//	ERR(fd = open(RGNDirPath RGNFileName "_loader.bin", O_RDONLY));
-	ERR(fd = open(RGNDirPath RGNFileName "_firmware.bin", O_RDONLY));
-
-	struct stat sb;
-
-	ERR(fstat(fd, &sb));
-
-	void *data;
-	ERR_NULL(data = mmap(NULL, sb.st_size, PROT_READ, MAP_PRIVATE, fd, 0));
-
-	close(fd);
-
-	cracker_t cjt, *cj = &cjt;
-
-	cjt.content.data = data;
-	cjt.content.base = 0x10020000;
-	cjt.content.size = sb.st_size;
-	cjt.content.end = cjt.content.base + cjt.content.size;
-
-	LOG("Loaded: " RGNFileName "_loader.bin... Start: 0x%08x, End: 0x%08x",
-		cjt.content.base, cjt.content.end);
-
-	symbol_p cjs = cracker_text(cj, cj->content.base);
-	cj->symbol = cjs;
-
-	for(cj->symbol_pass = 1; cj->symbol_count.added; cj->symbol_pass++)
-//	for(cj->symbol_pass = 1; cj->symbol_pass <= 3; cj->symbol_pass++)
-		cracker_pass(cj, 0);
-
-	cj->collect_refs = 1;
-	cj->symbol_pass = 0;
-
-	cracker_pass(cj, 0);
-
-	CORE_TRACE("/* **** **** **** **** */");
-
-	printf("\n\n/* **** **** **** **** */\n\n");
-
-	cracker_clear(cj);
-	cracker_symbol_queue_log(cj, cj->symbol_qhead);
-
-	munmap(data, sb.st_size);
-}
diff --git a/source/cracker_thumb.c b/source/cracker_thumb.c
index b64d5c5..cc17c9e 100644
--- a/source/cracker_thumb.c
+++ b/source/cracker_thumb.c
@@ -13,6 +13,7 @@
 
 /* **** */
 
+#include <assert.h>
 #include <stdint.h>
 
 /* **** */
@@ -24,8 +25,8 @@
 static int _fetch(cracker_p cj)
 {
 	PC += sizeof(uint16_t);
-	
-	return(_read(cj, IP & ~1, sizeof(uint16_t)));
+
+	return(_read(cj, IP & ~1U, sizeof(uint16_t)));
 }
 
 /* **** */
@@ -35,7 +36,7 @@ static int thumb_inst_add_rd_pcsp_i(cracker_p cj)
 	const uint16_t imm8 = mlBFMOV(IR, 7, 0, 2);
 	const int is_sp = BEXT(IR, 11);
 	
-	setup_rR_vR(N, is_sp ? rSP : rPC, is_sp ? 0 : THUMB_PC);
+	setup_rR_vR(N, is_sp ? rSP : rPC, is_sp ? 0 : (THUMB_PC & ~3U));
 	
 	setup_rR_dst_src(D, mlBFEXT(IR, 10, 8), rR(N));
 
@@ -170,7 +171,7 @@ static int thumb_inst_b(cracker_p cj)
 
 	CORE_TRACE("B(0x%08x); /* 0x%08x + 0x%03x*/", new_pc & ~1, PC, eao);
 
-	cracker_text(cj, new_pc | 1);
+	cracker_text_branch(cj, new_pc | 1);
 	
 	return(0);
 }
@@ -184,33 +185,35 @@ static int thumb_inst_bcc(cracker_p cj)
 
 	CORE_TRACE("B(0x%08x); /* 0x%08x + 0x%03x */", new_pc & ~1, THUMB_PC, imm8);
 
-	cracker_text(cj, new_pc);
-
-	const uint32_t new_lr = PC | 1;
-	return(cracker_text_branch_link(cj, new_lr));
+	cracker_text_branch_link(cj, new_pc, PC);
+	
+	return(0);
 }
 
 static int thumb_inst_bx_blx(cracker_p cj)
 {
+	assert(0 == mlBFEXT(IR, 2, 0));
+
 	const int link = BEXT(IR, 7);
 	
-	setup_rR_vR(M, mlBFEXT(IR, 6, 3), vR_GPR(M));
-	
+	_setup_rR_vR_src(cj, rrRM, mlBFEXT(IR, 6, 3));
+
 	CORE_TRACE_START();
 	
 	_CORE_TRACE_("B%sX(%s)", link ? "L" : "", rR_NAME(M));
 
 	if(rPC == rR_SRC(M)) {
-		_CORE_TRACE_("; /* 0x%08x */", vR(M));
+		int thumb = vR(M) & 1;
+		_CORE_TRACE_("; /* %c(0x%08x) */", thumb ? 'T' : 'A', vR(M));
 
-		cracker_text(cj, vR(M));
+		cracker_text_branch(cj, vR(M));
 	}
 
 	CORE_TRACE_END();
 
 	if(link) {
 		const uint32_t new_lr = PC | 1;
-		return(cracker_text_branch_link(cj, new_lr));
+		return(cracker_text_link(cj, new_lr));
 	}
 
 	return(0);
@@ -230,9 +233,7 @@ static int thumb_inst_bxx__bl_blx(cracker_p cj, uint32_t eao, int blx)
 
 	if(0) LOG("LR = 0x%08x, PC = 0x%08x", new_lr, new_pc);
 
-	cracker_text(cj, new_pc);
-
-	return(cracker_text_branch_link(cj, new_lr));
+	return(cracker_text_branch_link(cj, new_pc, new_lr));
 }
 
 static int thumb_inst_bxx_bl_blx(cracker_p cj)
@@ -418,7 +419,7 @@ static int thumb_inst_ldstm(cracker_p cj)
 		*dst++ = rr ? ('0' + i) : '.';
 		
 		if(bit_l)
-			cracker_reg_dst(cj, rr);
+			_setup_rR_dst(cj, rrRD, rr);
 		else
 			cracker_reg_src(cj, rr);
 	}
@@ -442,7 +443,8 @@ static int thumb_inst_pop_push(cracker_p cj)
 		*dst++ = rr ? ('0' + i) : '.';
 		
 		if(bit_l)
-			cracker_reg_dst(cj, rr);
+//			_setup_rR_dst(cj, rrRD, rr);
+			setup_rR_vR_dst_src(D, rr, rSP);
 		else
 			cracker_reg_src(cj, rr);
 	}
